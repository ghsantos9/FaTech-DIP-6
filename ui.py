# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer
import cv2
import qimage2ndarray # transformando o array em imagem para mostrar na interface
from imutils.video import VideoStream # pra mecher com threads 'e mais facil usar isso
import random
import face_recognition

class Ui_MainWindow(object):
    def __init__(self):
        self.setup_camera()
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))
        MainWindow.setMaximumSize(QtCore.QSize(800, 600))
        font = QtGui.QFont()
        font.setFamily("Sans Serif")
        font.setPointSize(12)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMaximumSize(QtCore.QSize(800, 600))
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 802, 601))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pergunta = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Sans Serif")
        font.setPointSize(30)
        self.pergunta.setFont(font)
        self.pergunta.setScaledContents(False)
        self.pergunta.setAlignment(QtCore.Qt.AlignCenter)
        self.pergunta.setObjectName("pergunta")
        self.verticalLayout.addWidget(self.pergunta)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setContentsMargins(20, 0, 20, 0)
        self.gridLayout.setHorizontalSpacing(60)
        self.gridLayout.setVerticalSpacing(20)
        self.gridLayout.setObjectName("gridLayout")
        self.resposta2 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.resposta2.setObjectName("resposta2")
        self.gridLayout.addWidget(self.resposta2, 3, 0, 1, 1)
        self.resposta3 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.resposta3.setObjectName("resposta3")
        self.gridLayout.addWidget(self.resposta3, 1, 1, 1, 1)
        self.resposta4 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.resposta4.setObjectName("resposta4")
        self.gridLayout.addWidget(self.resposta4, 3, 1, 1, 1)
        self.resposta1 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.resposta1.setObjectName("resposta1")
        self.gridLayout.addWidget(self.resposta1, 1, 0, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.framesCam = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.framesCam.sizePolicy().hasHeightForWidth())
        self.framesCam.setSizePolicy(sizePolicy)
        self.framesCam.setMinimumSize(QtCore.QSize(0, 0))
        self.framesCam.setMaximumSize(QtCore.QSize(600, 400))
        self.framesCam.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.framesCam.setText("")
        self.framesCam.setPixmap(QtGui.QPixmap("mpv-shot0001.png"))
        self.framesCam.setScaledContents(True)
        self.framesCam.setAlignment(QtCore.Qt.AlignCenter)
        self.framesCam.setWordWrap(False)
        self.framesCam.setMargin(10)
        self.framesCam.setObjectName("framesCam")
        self.verticalLayout_2.addWidget(self.framesCam, 0, QtCore.Qt.AlignHCenter)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.resposta1.clicked.connect(self.teste1)
        self.resposta2.clicked.connect(self.teste2)
        self.resposta3.clicked.connect(self.teste3)
        self.resposta4.clicked.connect(self.teste4)            
        
        self.main()

    def teste1(self):
        if resposta1 == certa:
            print("correto")
        else:
            global errado
            errado = 1
    def teste2(self):
        if resposta2 == certa:
            print("correto")
        else:
            global errado
            errado = 1
    def teste3(self):
        if resposta3 == certa:
            print("correto")
        else:
            global errado
            errado = 1
    def teste4(self):
        if resposta4 == certa:
            print("correto")
        else:
            global errado
            errado = 1

    def retranslateUi(self, MainWindow):
        print("retranslateUi")
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pergunta.setText(_translate("MainWindow", pergunta))
        self.resposta2.setText(_translate("MainWindow", resposta2))
        self.resposta3.setText(_translate("MainWindow", resposta3))
        self.resposta4.setText(_translate("MainWindow", resposta4))
        self.resposta1.setText(_translate("MainWindow", resposta1))
        
    def setup_camera(self): #Initialize camera.        
        self.capture=VideoStream(src=0).start()     # 2
        self.timer = QTimer()
        self.timer.timeout.connect(self.main)
        self.timer.start(15)

    def main(self):
        def mostra_imagem(img):
            cv2.imshow('janela de teste', img)
            cv2.waitKey(0) # waits until a key is pressed
            cv2.destroyAllWindows() # destroys the window showing image
            exit(0)

        def inserir_torta_na_cara(frame, torta, face_locations):
            frameH, frameW, _ = frame.shape
            tortaH, tortaW, _ = torta.shape

            #sem face, sem torta
            if not face_locations:
                return

            #checa limites da tela, para que a torta não "saia" da janela
            offsetH, offsetW = face_locations[0][0] - int(frameH * 0.13), face_locations[0][1] - int(frameW * 0.35)
            if offsetW < 0:
                offsetW = 0
            if offsetH < 0:
                offsetH = 0
            if tortaW + offsetW > frameW:
                offsetW = frameW - tortaW - 10
            if tortaH + offsetH > frameH:
                offsetH = frameH - tortaH - 10

            crop = frame[offsetH:tortaH + offsetH, offsetW:tortaW + offsetW]
            #mostra_imagem(crop)

            torta_cinza = cv2.cvtColor(torta, cv2.COLOR_BGR2GRAY)
            _, torta_mask = cv2.threshold(torta_cinza, 100, 255, cv2.THRESH_BINARY)
            torta_mask_inv = cv2.bitwise_not(torta_mask)
            #mostra_imagem(torta_mask_inv)

            fundo = cv2.bitwise_and(crop, crop, mask = torta_mask_inv)
            #print(crop.shape, torta_mask.shape)
            #mostra_imagem(fundo)

            frente = cv2.bitwise_and(torta, torta, mask = torta_mask)
            #mostra_imagem(frente)

            imgJunta = cv2.add(frente, fundo)
            #mostra_imagem(imgJunta)

            frame[offsetH:tortaH + offsetH, offsetW:tortaW + offsetW] = imgJunta
            #mostra_imagem(frame)

            return frame

        # print("aaa")
        frame = self.capture.read()
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image = qimage2ndarray.array2qimage(frame)
        self.framesCam.setPixmap(QtGui.QPixmap(image))
        if errado == 1: 
            # print("errou")
            it = 0
            if it % 5 == 0:
                face_locations = face_recognition.face_locations(frame)
                inserir_torta_na_cara(frame, torta, face_locations)
                image = qimage2ndarray.array2qimage(frame)
                self.framesCam.setPixmap(QtGui.QPixmap(image))
        
if __name__ == "__main__":
    import sys
    def escolherPergunta(): # escolhendo uma pergunta para mostrar na interface, lista com o primeiro elemento a pergunta e o segundo a resposta correta
        perguntas = [["Qual o melhor curso da Fatec?","Manufatura Avançada","Banco de Dados","ADS","Logística"],["Quantos cursos há na Fatec Sjc em 2021?","8","10","4","5"]]
        escolhida = random.choice(perguntas)
        return escolhida
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()

    escolhida = escolherPergunta()
    pergunta = escolhida[0]
    certa = escolhida[1]
    respostas = escolhida[1:5]
    random.shuffle(respostas)
    resposta1 = respostas[0]
    resposta2 = respostas[1]
    resposta3 = respostas[2]
    resposta4 = respostas[3]
    global errado
    errado = 0

    torta = cv2.imread('torta.png')
    torta = cv2.cvtColor(torta, cv2.COLOR_BGR2RGB)
    #redimensiona torta de acordo com webcam
    dsize = (int(torta.shape[0] * 0.20), int(torta.shape[1] * 0.20))
    torta = cv2.resize(torta, dsize, interpolation = cv2.INTER_AREA)

    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
